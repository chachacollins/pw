const std = @import("std");
const vaxis = @import("vaxis");
const color = @import("color.zig");
const TextInput = @import("vaxis").widgets.TextInput;
const TextView = vaxis.widgets.TextView;
/// Set the default panic handler to the vaxis panic_handler. This will clean up the terminal if any
/// panics occur
pub const panic = vaxis.panic_handler;

/// Set some scope levels for the vaxis scopes
pub const std_options: std.Options = .{
    .log_scope_levels = &.{
        .{ .scope = .vaxis, .level = .warn },
        .{ .scope = .vaxis_parser, .level = .warn },
    },
};

/// Tagged union of all events our application will handle. These can be generated by Vaxis or your
/// own custom events
const Event = union(enum) {
    key_press: vaxis.Key,
    key_release: vaxis.Key,
    mouse: vaxis.Mouse,
    focus_in, // window has gained focus
    focus_out, // window has lost focus
    paste_start, // bracketed paste start
    paste_end, // bracketed paste end
    paste: []const u8, // osc 52 paste, caller must free
    color_report: vaxis.Color.Report, // osc 4, 10, 11, 12 response
    color_scheme: vaxis.Color.Scheme, // light / dark OS theme changes
    winsize: vaxis.Winsize, // the window size has changed. This event is always sent when the loop
    // is started
};

const screenPages = enum {
    Main,
    Post,
    Get,
};

/// The application state
pub const MyApp = struct {
    allocator: std.mem.Allocator,
    // A flag for if we should quit
    should_quit: bool,
    /// The tty we are talking to
    tty: vaxis.Tty,
    /// The vaxis instance
    vx: vaxis.Vaxis,
    /// A mouse event that we will handle in the draw cycle
    mouse: ?vaxis.Mouse,
    /// currentScreen the user is on
    currentScreen: screenPages,
    ///url
    url: ?[]const u8,
    //req body
    body: []const u8,
    /// textinput
    textInput: TextInput,
    ///scrollView
    textView: TextView,
    pub fn init(allocator: std.mem.Allocator) !MyApp {
        const vx = try vaxis.init(allocator, .{});
        const textInput = TextInput.init(allocator, &vx.unicode);

        return .{
            //wtf zls
            .allocator = allocator,
            .should_quit = false,
            .tty = try vaxis.Tty.init(),
            .vx = vx,
            .mouse = null,
            .currentScreen = screenPages.Main,
            .url = null,
            .textInput = textInput,
            .textView = undefined,
            .body = "",
        };
    }

    pub fn deinit(self: *MyApp) void {
        // Deinit takes an optional allocator. You can choose to pass an allocator to clean up
        // memory, or pass null if your application is shutting down and let the OS clean up the
        // memory
        self.vx.deinit(self.allocator, self.tty.anyWriter());
        self.tty.deinit();
        self.textInput.deinit();
    }

    pub fn run(self: *MyApp) !void {
        // Initialize our event loop. This particular loop requires intrusive init
        var loop: vaxis.Loop(Event) = .{
            .tty = &self.tty,
            .vaxis = &self.vx,
        };
        try loop.init();

        // Start the event loop. Events will now be queued
        try loop.start();

        try self.vx.enterAltScreen(self.tty.anyWriter());

        // Query the terminal to detect advanced features, such as kitty keyboard protocol, etc.
        // This will automatically enable the features in the screen you are in, so you will want to
        // call it after entering the alt screen if you are a full screen application. The second
        // arg is a timeout for the terminal to send responses. Typically the response will be very
        // fast, however it could be slow on ssh connections.
        try self.vx.queryTerminal(self.tty.anyWriter(), 1 * std.time.ns_per_s);

        // Enable mouse events
        try self.vx.setMouseMode(self.tty.anyWriter(), true);

        // This is the main event loop. The basic structure is
        // 1. Handle events
        // 2. Draw application
        // 3. Render
        while (!self.should_quit) {
            // pollEvent blocks until we have an event
            loop.pollEvent();
            // tryEvent returns events until the queue is empty
            while (loop.tryEvent()) |event| {
                try self.update(event);
            }
            // Draw our application after handling events
            self.draw();

            // It's best to use a buffered writer for the render method. TTY provides one, but you
            // may use your own. The provided bufferedWriter has a buffer size of 4096
            var buffered = self.tty.bufferedWriter();
            // Render the application to the screen
            try self.vx.render(buffered.writer().any());
            try buffered.flush();
        }
    }

    /// Update our application state from an event
    pub fn update(self: *MyApp, event: Event) !void {
        switch (event) {
            .key_press => |key| {
                // key.matches does some basic matching algorithms. Key matching can be complex in
                // the presence of kitty keyboard encodings, this will generally be a good approach.
                // There are other matching functions available for specific purposes, as well
                switch (self.currentScreen) {
                    screenPages.Main => {
                        if (key.matches('g', .{})) {
                            self.currentScreen = screenPages.Get;
                        }
                        if (key.matches('p', .{})) {
                            self.currentScreen = screenPages.Post;
                        }
                    },
                    screenPages.Get => {
                        if (key.matches(vaxis.Key.enter, .{})) {
                            try self.get();
                        } else {
                            try self.textInput.update(.{ .key_press = key });
                        }
                    },
                    else => {},
                }
                if (key.matches('c', .{ .ctrl = true })) {
                    self.should_quit = true;
                }
            },
            .mouse => |mouse| self.mouse = mouse,
            .winsize => |ws| try self.vx.resize(self.allocator, self.tty.anyWriter(), ws),
            else => {},
        }
    }

    //get request handler
    fn get(self: *MyApp) !void {
        self.url = try self.textInput.toOwnedSlice();
        if (self.url) |url| {
            const uri = std.Uri.parse(url) catch |err| {
                try self.vx.notify(self.tty.anyWriter(), "Uri parsing error", "please check the url");
                std.debug.print("{}", .{err});
                return;
            };
            var client = std.http.Client{ .allocator = self.allocator };
            defer client.deinit();
            const serverHeadBuffer = try self.allocator.alloc(u8, 1024 * 8);
            defer self.allocator.free(serverHeadBuffer);

            var req = try client.open(.GET, uri, .{ .server_header_buffer = serverHeadBuffer });
            defer req.deinit();
            try req.send();
            try req.finish();
            try req.wait();
            const body = try req.reader().readAllAlloc(self.allocator, 1024 * 80);
            self.body = body;
        } else {
            try self.vx.notify(self.tty.anyWriter(), "Url missing error", "please check the url");
        }
    }
    /// Draw our current state
    pub fn draw(self: *MyApp) void {
        //main screen draws
        if (self.currentScreen == screenPages.Main) {
            const tittle = "Main Screen";
            const banner = "POSTWOMAN";

            // Window is a bounded area with a view to the screen. You cannot draw outside of a windows
            // bounds. They are light structures, not intended to be stored.
            const win = self.vx.window();

            // Clearing the window has the effect of setting each cell to it's "default" state. Vaxis
            // applications typically will be immediate mode, and you will redraw your entire
            // application during the draw cycle.
            win.clear();

            // In addition to clearing our window, we want to clear the mouse shape state since we may
            // be changing that as well
            self.vx.setMouseShape(.default);

            const child = win.child(.{
                .x_off = (win.width / 2) - 7,
                .y_off = win.height / 2 + 1,
                .width = .{ .limit = banner.len },
                .height = .{ .limit = 10 },
            });

            // mouse events are much easier to handle in the draw cycle. Windows have a helper method to
            // determine if the event occurred in the target window. This method returns null if there
            // is no mouse event, or if it occurred outside of the window
            const style: vaxis.Style = if (child.hasMouse(self.mouse)) |_| blk: {
                // We handled the mouse event, so set it to null
                self.mouse = null;
                self.vx.setMouseShape(.pointer);
                break :blk .{ .reverse = true };
            } else .{};

            // Print a text segment to the screen. This is a helper function which iterates over the
            // text field for graphemes. Alternatively, you can implement your own print functions and
            // use the writeCell API.
            _ = try child.printSegment(.{ .text = banner, .style = style }, .{});
            self.vx.setTitle(self.tty.anyWriter(), tittle) catch return;
        }

        //The get screen page draws
        if (self.currentScreen == screenPages.Get) {
            const tittle = "GET SCREEN";
            const msg = "URL: ";
            const win = self.vx.window();
            win.clear();
            self.vx.setMouseShape(.default);

            const textChild = win.child(.{
                .x_off = win.width / 2 - 35,
                .y_off = 0,
                .width = .{ .limit = 70 },
                .height = .{ .limit = 3 },
                .border = .{
                    .where = .all,
                    //pls zls
                    .style = vaxis.Style{ .fg = vaxis.Color.rgbFromUint(color.pine) },
                },
            });

            const reqBodyChild = win.child(.{
                .x_off = win.width / 2 - 35,
                .y_off = 0,
                .width = .{ .limit = 70 },
                .height = .{ .limit = 70 },
                .border = .{
                    .where = .all,
                    //pls zls
                    .style = vaxis.Style{ .fg = vaxis.Color.rgbFromUint(color.pine) },
                },
            });

            const msgChild = win.child(.{
                .x_off = (win.width / 2 - 35) - msg.len - 2,
                .y_off = 1,
                .width = .{ .limit = msg.len },
                .height = .{ .limit = 1 },
            });
            self.textInput.draw(textChild);
            _ = try msgChild.printSegment(.{ .text = msg, .style = .{
                .fg = vaxis.Color.rgbFromUint(color.gold),
            } }, .{});
            _ = try reqBodyChild.printSegment(.{ .text = self.body, .style = .{
                .fg = vaxis.Color.rgbFromUint(color.gold),
            } }, .{});
            self.vx.setTitle(self.tty.anyWriter(), tittle) catch return;
        }
    }
};
